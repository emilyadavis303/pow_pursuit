%script{:src => "https://maps.googleapis.com/maps/api/js"}

%body.resort-background
  .resorts-site-wrapper
    .site-wrapper-inner
      .cover-container
        .inner.cover
          %h1.cover-heading= @resort.name
          .container-fluid
            .row
              .col-lg-2.resort-details
                %h1.cover-heading Snowfall:
                %h2= "Past 24 hours: #{@snowfall_24 || 0} in."
                %h2= "Past 3 days: #{@snowfall_3 || 0} in."
                %h2= "Past 7 days: #{@snowfall_7 || 0} in."
                %h2 Travel Time:
              .col-lg-8
                #map-canvas{:style => "height: 525px; width: auto;"}
                %p
                  %button{:onclick => "calculateDistances();", :type => "button"}
                  Calculate distances
                  #outputDiv

                  :javascript
                    var map;
                    var geocoder;
                    var bounds = new google.maps.LatLngBounds();
                    var markersArray = [];

                    var origin1 = new google.maps.LatLng(39.640600, -106.373564);
                    var destinationA = new google.maps.LatLng(39.642502, -105.871690);

                    var destinationIcon = 'https://chart.googleapis.com/chart?chst=d_map_pin_letter&chld=D|FF0000|000000';
                    var originIcon = 'https://chart.googleapis.com/chart?chst=d_map_pin_letter&chld=O|FFFF00|000000';

                    function initialize() {
                      var opts = {
                        center: new google.maps.LatLng(39.640600, -106.373564),
                        zoom: 10
                      };
                      map = new google.maps.Map(document.getElementById('map-canvas'), opts);
                      geocoder = new google.maps.Geocoder();
                    }

                    function calculateDistances() {
                      var service = new google.maps.DistanceMatrixService();
                      service.getDistanceMatrix(
                        {
                          origins: [origin1],
                          destinations: [destinationA],
                          travelMode: google.maps.TravelMode.DRIVING,
                          unitSystem: google.maps.UnitSystem.METRIC,
                          avoidHighways: false,
                          avoidTolls: false
                        }, callback);
                    }

                    function callback(response, status) {
                      if (status != google.maps.DistanceMatrixStatus.OK) {
                        alert('Error was: ' + status);
                      } else {
                        var origins = response.originAddresses;
                        var destinations = response.destinationAddresses;
                        var outputDiv = document.getElementById('outputDiv');
                        outputDiv.innerHTML = '';
                        deleteOverlays();

                        for (var i = 0; i < origins.length; i++) {
                          var results = response.rows[i].elements;
                          addMarker(origins[i], false);
                          for (var j = 0; j < results.length; j++) {
                            addMarker(destinations[j], true);
                            outputDiv.innerHTML += origins[i] + ' to ' + destinations[j]
                                + ': ' + results[j].distance.text + ' in '
                                + results[j].duration.text + '<br>';
                          }
                        }
                      }
                    }

                    function addMarker(location, isDestination) {
                      var icon;
                      if (isDestination) {
                        icon = destinationIcon;
                      } else {
                        icon = originIcon;
                      }
                      geocoder.geocode({'address': location}, function(results, status) {
                        if (status == google.maps.GeocoderStatus.OK) {
                          bounds.extend(results[0].geometry.location);
                          map.fitBounds(bounds);
                          var marker = new google.maps.Marker({
                            map: map,
                            position: results[0].geometry.location,
                            icon: icon
                          });
                          markersArray.push(marker);
                        } else {
                          alert('Geocode was not successful for the following reason: '
                            + status);
                        }
                      });
                    }

                    function deleteOverlays() {
                      for (var i = 0; i < markersArray.length; i++) {
                        markersArray[i].setMap(null);
                      }
                      markersArray = [];
                    }

                    google.maps.event.addDomListener(window, 'load', initialize);
